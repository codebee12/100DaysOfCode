Ques: Sherlock & Anagrams
Takeaway: substring formation, Combination formula - 
Since getting pairs of anagrams,i.e, pairs we use nC2 = (n * (n-1))/2

Solution:
 static int sherlockAndAnagrams(String s) {
     HashMap<String, Integer> map= new HashMap<String, Integer>(); 
  
        for(int i = 0; i < s.length(); i++){ 
            for(int j = i; j < s.length(); j++){ 
                char[] valC = s.substring(i, j+1).toCharArray(); 
                Arrays.sort(valC); 
                String val = new String(valC); 
                if (map.containsKey(val))  
                    map.put(val, map.get(val)+1); 
                else 
                    map.put(val, 1); 
            } 
        } 
        int anagramPairCount = 0; 
        for(String key: map.keySet()){ 
            int n = map.get(key); 
            anagramPairCount += (n * (n-1))/2; 
        } 
      return anagramPairCount;

    }